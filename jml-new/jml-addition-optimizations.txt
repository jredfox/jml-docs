CentralRegistry<id, ModTag, Object>
min id: Long.min_value
max id: Long.max_value
map storage: starts out postive for the lowest data type then fill out lowest for the data type for example 0-126 then -1 - -127 for byte. does byte, short, int, long
examples Map<byte(id), ModTag, Object>
#currentId //used for autoAssigning
ids are registered straight to a file on startup
re-register when applicable
unregister when applicable
registry mappings (id, modtag, obj) single file or broken up into id blocks of Short.max_value whatever is proven to be fastest
registry mappings (modtag, id, obj) per modid domain

ModTag:
A-Z,a-z,0-9,_-.
modid:<object_category>:objId
if starts with minecraft:obj will actually turn into just obj for memory reasons
cannot end / start with "_-." characters for File System reasons
example: /summon minecraft:entities:ghast or /summon entities:ghast since minecraft: isn't nesecary
example 2: /setblock aetherii:blocks:grass
Fields:
#domain
#sku //in case of conflict users will have to use the modid#sku:objCat:objId
#objectName

conflicting modids:
- if both the modid and sku conflicts an asm mod will be created for them both replacing the strings of modid: and modid#sku:
- to be aware of changing sku's modders should make them configurable
* warning changing the mod's sku will result in incompatabilities from the mod's sku changing and going into a previous world the items would now not load

SKU: 3,600,000,000 (36^8) possibilities
A-Z, 0-9 with 8 digits being required
sku is not a replacement for modid it just becomes modid#sku in case of conflict
not required for commands unless it's conflicting as the modid's sku can be fetched

when joining world:
- insecure fast: lists modid#sku and version numbers
- secure slow: list of md5 mod files and if enabled config file md5s
- servers can deny client only mods when joining
- some servers may require a password to join

on world conversion load:
checks id mappings and if it doesn't match current registry will give user prompt to go to the main menu or convert now
conversion will remapp any ids that don't match the current ids in the registry and for non existing ids will convert them to their ModTag with sku. the ModTag will get get converted properly when the mod gets re-added.
ModTag that don't exist for the current mod yet still have the same domain will maintain it's id until it gets replaced in game

Mod Registration Objects Unloading to Save memory:
- models
- textures
- registrations <id, obj>
- trash collection for <id, obj> when unregistering
- triggers when client transfers into another dimension
- triggers when client leaves to the main menu
- triggers when dedicated server unloads a dimension
- triggers on chunk unload if configurable x amount of objects are in use
- note: will re-register items in a recipe book if you have the items to create it
- note: unloading registration can be turned off in the config but isn't recommended as you can quickly run out of memory due to quantity of Mod objects registered and all kept in memory

jml cloud computing id mapping:
- world and main registry mappings could use a url in order to fetch the mappings
- connection will stay open when game / world is open then when an id is needed it will fetch it by it's long id index value
- url doesn't have to be online but could be stored from an external hardrive

chunk optimizations:
empty chunks are 0 bytes
16x16 rows instead of everything in one array
16x0 rows for air where [0] = null
16x1 rows for rows that are completly full
use byte,short,int,long as ids rather then resource locations unless ModTag is required
biome as a single id per entire chunk
try to optimize light mapping or fix it so it's non laggy