CentralRegistry<id, ModTag, Object>
min id: Integer#MIN_VALUE
max id: Integer#MAX_VALUE
map storage: starts out postive for the lowest data type then fill out lowest for the data type for example 0-126 then -1 - -127 for byte. does byte, short, int, long
examples Map<byte(id), ModTag, Object>
#currentId //used for autoAssigning
ids are registered straight to a file on startup
re-register when applicable
unregister when applicable
registry will be stored onto the disk via single file or multiple whichever tests faster
central registries will only load when the modpack fingerprint has changed

method a: 68 bytes per line and (256^4) lines per registry. first 4 bytes are the int the other 64 bytes is the ModTag with uuid. Using either MappedByteBuffer or something similar
method b: re-registeres id blocks of 1k at a time and each block is a seperate file
method d: test to see if mysql is a valid solution for my situation

Solutions that won't work without modifications:
method 1: re-registeres using modid mappings #too slow as mods don't have a limit on amount of objects per ModTag object type
method 2: re-registers using dimId all at once #too slow and users can have the ids in another dimension

Creative Tabs:
- will have to use the same method as the central registry or mysql and be pre-computed during registration as there is no limit on the size of them and be indexed by id sections or pages. especially for pages like the search all tab
- dynamic per opening items will still be an option but, users would have to select what index page to put it in and won't get saved. Also not recomendded as it will always be kept in memory

Configurations:
- JML will quickly determine if a configuration change occured by using the lastmodified date on the file
- JML has ASM and normal configuration events used to load them properly per mod multi threaded

ModTag:
A-Z,a-z,0-9,_-.
modid:<cat>:objId
if starts with minecraft: it will drop minecraft to save memory
users in game should use domain:cat:obj instead of uuid:cat:obj as it's more user friendly but either one works
cannot end / start with "_-." characters for File System reasons
example: /summon minecraft:entities:ghast or /summon entities:ghast since minecraft: isn't nesecary
example 2: /setblock aetherii:blocks:grass
Fields:
#domain
#uuid //a reference to the mod's uuid
#objectName

conflicting modids:
- if both the modid or uuid conflicts an asm mod will be created for them both replacing the strings of modid: and uuid: within their jars
- modders should be aware that modid may be configurable and inside their mod's code use uuid to get a modid if it's not inside of a config file
- if a uuid conflict occurs any mods using it will become incompatible and the mod itself and it's deps should change the uuid
- modders should use JML#getModByUUID(UUID)#modid to get the mod's modid instead of just hard coding it
- a mod's modid will be configurable under jml's modpack configuration file

when joining world:
- insecure fast: lists uuid and version numbers
- secure slow: list of md5 and uuid and if enabled config files md5s#is md5 only as it's fast no need to slow down joining process if an md5 attack occurs chances are it won't be a valid jar file and client will crash anyways
- servers can deny client only mods when joining
- some servers may require a password to join

on world conversion load:
checks id mappings and if it doesn't match current registry will give user prompt to go to the main menu or convert now
conversion will remapp any ids that don't match the current ids in the registry and for non existing ids will convert them to their ModTag with uuid. the ModTag will get get converted properly when the mod gets re-added.
ModTag that don't exist for the current mod yet still have the same domain will maintain it's id until it gets replaced in game

Mod Registration Objects Unloading to Save memory:
- models
- textures
- registrations <id, obj>
- trash collection for <id, obj> when unregistering
- triggers when client transfers into another dimension
- triggers when client leaves to the main menu
- triggers when dedicated server unloads a dimension
- triggers on chunk unload if configurable x amount of objects are in use
- note: will re-register items in a recipe book if you have the items to create it
- note: unloading registration can be turned off in the config but isn't recommended as you can quickly run out of memory due to quantity of Mod objects registered and all kept in memory

jml cloud computing id mapping:
- world and main registry mappings could use a url in order to fetch the mappings
- connection will stay open when game / world is open then when an id is needed it will fetch it by it's long id index value
- url doesn't have to be online but could be stored from an external hardrive

chunk optimizations:
empty chunks are 0 bytes
16x16 rows instead of everything in one array
16x0 rows for air where [0] = null
16x1 rows for rows that are completly full
use byte,short,int,long as ids rather then resource locations unless ModTag is required
biome as a single id per entire chunk
try to optimize light mapping or fix it so it's non laggy

ints, arrays, and resource location copies o my!:
- integer cacheing including byte short, int long in weak maps
- resource location are now ModTags and will be cached in weak maps
- what will use the cache?: chunks, maybe blockpos, registry and massive amounts of repetitive number calling whenever I see it
- tell modders to only store what they need in memory during registration and dump any arrays that were used to create them afterwards
- why?: this will take the same data in order to retrieve the primitive objects but use a cache imediatly afterwords of it fetching therefore 100k calls of a single integer of dirt with id of 1 will be one memory location only the index will take up memory