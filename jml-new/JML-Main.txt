ModLoading:
- fast and clean
- loading order based on id and deps
- loading based on client, dedicated server, both
- loads per game and per api (minecraft could have my base api and other peoples apis)
- bytecode framework for easy base class editing and manipulation while still being compatible with other mods
- loading stages: game, registry
- registry
- points directly to mods / coremods / ats
- java standard library framework to help make modding with ease
- universal and or interchangeable apis for advanced compatability
- capabilities
- compatability (mods will be able to edit the same class while being compatible)
- central registry
- events? or a solution for events
- Builtin configurations for mods
- programable mod loader which binds it to a specified game by an api jar
- central registry where it can contain billions of indexes without taking up that much ram
- all game apis will modify the game under a jml/<gameid> for a clean install

Bytecode Framework:
- embedded rafactored libraries example com.jredfox.silkspawners --> com.jredfox.<your-modid>.silkspawners or even version specified
- jar mods
- public -f if enabled by the api
- access transformers
- asm
- class unifyers
- easy enums
- capabilities

Fast Mod Loading:
- direct to mod classes
- direct to event classes
- direct points to ats
- direct points to coremods
- multi threading
- cached ASM
- ASM static loading already transformed all classes before launching
- fat jar for modpack final creation #all mods and libraries in a single jar speeds up loading time!
- multi thread loading of configuration files
- the remapped jar will provide names in 6 characters or less which will increase runtime speeds for obfuscated enviroment
- hardware acceleration using opencl from lwjgl(possible use of computing stuff on the gpu whenever possible)
- threaded tranquility library cpu thread high power performance
- uses mojang's tricks intel for perforamnce for ONLY minecraft apis

Event Handling:
- similar to forges
#EventCancelation#Functionality //disables functionality of the event's method but doesn't stop the event handler
#EventCancelation#Event //disables the functionality of the event handler but not the functionality note eventhandlers that recieve canceled will still function
#cancel(EventCancelation type, boolean true / false)
#returnResult(Object obj) if a single return value is specified
#cancelable
@Event func_(EventObject event) or @Event("func_, params = {Object.class, int.class})

IDE Features:
- programable per game
- loader contains 0 game code
- everything public - final
- easy high level bytecode manipulation using Class Modification Unifyer (CMU)
- JML Developement kit (for compiling your mods)

Jar Sigining & Security Checks:
- for hash checking JML will use md5-sha1 the chances of both hashing algorithms failing are next to none
- secured mods will be encrypted and the key will be the meta-inf file's md5-sha1
- secured mods will crash if the meta-inf check fails even if decyrption is sucessfull.

modpack fingerprint:
- ability to determine quickly if the modpack configuration, mods, libs are the same
- uses dirtyClases.jar for the same fingerprint, however it will not skip asm for dynamic transformers if it's not found in dirtyclasses.jar

modpacks:
- can compile into a fatjar.jar with two modes precomputed asm and re-built every time an asm change occurs or having the transforms in dirtyclasses.jar still. in both modes there will be a resources.jar to. either way it will cut down load and execution time
- fatjar can be compiled into a native fatjar. the ASM will all be precomputed into the jar before compilation the resources will be seperated. Final resutls: fatjar.exe, fatjar.pkg, fatjar.app etc... with x32, x64, arm64 depnding upon os and machine cpu architecture
- native fatjars and fatjar.jar with precomputed asm will have to be recompiled if an ASM change occurs
- reobfuscation for fastest runtime enviroment while support both fatjar.jar and native fatjar(only downside is end users would have to provide both the mapping log files and mods when reporting bugs)

Versional Mods:
- mods objects will be registered unless it's a duplicate from a previous version
- ModTag format is modid_version:objectType:object
- versional mods asm & event handling will only handled by the latest version and previous versions will only fire if allowed to by the highest version
- versional mods objects will have a registry mapping of all previous versions of the versional mod in which that object was duplicated by. for example 1.7 stone block is the same as 1.6 stone block

Proxies:
- provide proxies that only load when x dep is loaded supporting soft jar deps without reflection
examples of this include libraries and mods

graphics apis:
- interchangeable graphics apis but the api will only support by default opengl
- mods that don't support the current graphics api will cause a crash example: tries to use opengl code when directx is running
- graphic apis engines, directx 11-12, opengl, mobile/apple(openglES, metal), vulkan

sound engine changeable per device:
- DTS:X(7.1)
- Adobe(5.1 is what I heard)
- lwjgl 3d sound
- lwjgl input fix for (changing input sounds)

inputs:
- xbox controller
- ps5 controller
- touchscreen with zoom
- microphone(yes allowing for voice chat mods)

Threaded Tranquility:
- dynamically determines amount of java threads from physcial cpu cores and threads
- multi thread class loader / unloader in batches
- threads are damien if nessary, prioritized on (high or realtime)
- ability to change power plan on windows for higher performance

Mobile: adroid / IOS / IPadOS / FireOS / ChromeOS
- NOTE this is the last thing on my todo list as I would need to add a graphics engine of opengl-es
- android will be supported which includes support for{anrdoid phones, adroid tablets, FireOs(amazon tabelets), ChromeOs 2019+}.
- since IOS and IPadOS both run Objective-C and androids support will already have support for opengl-es we will see if I can get support working for it

Console Editions: xbox / playstation / nintendo switch:
- console editions will not be supported because each one uses a different graphics api therefore isn't truly crossplatform most mods may write opengl and opengl-es but won't write an additional 4 more apis

META-INF.mf:
ML:JML
ML-Version:1.0.0//(SemanticVersion or another type depends on the mod loader)
ML-API: JML-MC-API
Game:Minecraft
GameVersion:1.6.4
RamAdded:1094 # (amount of bytes to compute to add for dynamic ram if not overriden by the user)
customJVM:SizeOf="customArgs" #custom jvm args appended to the jvm args

Mods.json
[
{

"accessTransformer": "META-INF/modid#4097.at",

"Mod":
{
   class: com.main.TestMod
   modId: modid#4097
   modName: "Mod Name"
   logo:Meta-INF/modid#4097.png
   eventclasses:[] #auto filled each compilation
},

Deps
[
  {
     type:Mod #type can be lib to
     version:1.0.0
     projectId:(curseforge, jml future)
     fileId:(curseforge, jml future)
     dl:url #not required if you have projectId & fileId
     md5-sha1: #not required if you have projectId & fileId but will check if non blank
     autoUpdate:false #if true will automatically download the latest version from JML, curseforge or maven repositories. not supported for direct or inderect urls
  }
],

"CoreMod:
{
  class: com.transformer.Coremod
  modId: modid_core#2490
  modName: "Core Mod Name"
  logo:Meta-INF/modid_core#2490.png
}

}
]